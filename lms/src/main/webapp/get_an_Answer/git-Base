分布式版本控制系统 Git

准备工作:
        安装
        创建GitHub帐号
        操作:
        ==创建版本库:
                ==通过git init命令把这个目目录变成Git可以管理的仓库:
                  $ git init
                  Initialized empty Git repository in /Users/michael/learngit/.git/
                ==用用命令 git add 把文文件添加到仓库:
                  $ git add file
                ==用命令 git commit 把文文件提交到仓库:
                  $ git commit -m "content"
                ==git status 命令可以让我们时刻掌握仓库当前的状态
                ==git diff file 顾名思义就是查看(不同)difference
        ==版本回退:
                ==git log 命令显示示从最近到最远的提交日日志, [--pretty=oneline]
                ==git reset --hard HEAD^
                    在Git中,用用HEAD表示示当前版本,也就是最新的,上一个版本就是
                  HEAD^,上上一个版本就是HEAD^^,当然往上100 个版本写100个^比比较容易数不过来,
                  所以写成HEAD~100。
                ==git reset --hard idname
                    HEAD指向的版本就是当前版本,因此,Git允许我们在版本的历史之间穿梭,使用用命
                  令 git reset --hard commit_id 。
                ==git reflog
                  要重返未来,用用 git reflog 查看命令历史,以便确定要回到未来的哪个版本。
        ==工作区和暂存区:
          工作区(Working Directory):就是你在电脑里能看到的目录
          版本库(Repository):工工作区有一一个隐藏⺫目目录“.git”,这个不算工工作区,而而是Git的版本库。
            Git的版本库里存了很多东西,其中最重要的就是称为stage(或者叫index)的暂存区,
            还有Git为我们自自动创建的第一一个分支支master,以及指向master的一一个指针叫HEAD。
            用“ git add ”把文件添加进去,实际上就是把文件修改添加到暂存区;
            用用“ git commit ”提交更改,实际上就是把暂存区的所有内容提交到当前分支支。
        ==管理修改:了解Git是如何跟踪修改的,每次修改,如果不add到暂存区,那就不会加入入到commit中。
        ==撤销修改:
                ==$ git checkout -- readme.txt
                  命令 git checkout -- readme.txt 意思就是,把readme.txt文件在工作区的修改全部撤销,这里有两种情况:
                  一种是readme.txt自修改后还没有被放到暂存区,现在,撤销修改就回到和版本库一模一样的状态;
                  一种是readme.txt已经添加到暂存区后,又又作了修改,现在,撤销修改就回到添加到暂存区后的状态。
                  总之,就是让这个文文件回到最近一一次 git commit 或 git add 时的状态。
                ==$ git reset HEAD readme.txt
                  git reset 命令既可以回退版本,也可以把暂存区的修改回退到工作区。当我们用HEAD时,表示最新的版本。
                  再用用 git status 查看一一下,现在暂存区是干净的,工作区有修改,还记得如何丢弃工工作区的修改吗?
                  ==$ git checkout -- readme.txt
        ==删除文件:
                ==$ git rm test.txt
                ==$ git commit -m "remove test.txt"
                  命令 git rm 用于删除一个文文件。如果一个文件已经被提交到版本库,那么你永远不用担心误删,
                  但是要小心,你只能恢复文件到最新版本,你会丢失最近一次提交后你修改的内容。
                ==$ git checkout -- test.txt
                  git checkout 其实是用用版本库里的版本替换工作区的版本,无论工作区是修改还是删除,都可以“一键还原”。
                  
        ==远程仓库:由于你的本地Git仓库和GitHub仓库之间的传输是通过SSH加密的,所以,需要一点设置:
                  
                  第1步:创建SSH Key。
                ==$ ssh-keygen -t rsa -C "youremail@example.com"
                  你需要把邮件地址换成你自己的邮件地址,然后一路回车,使用用默认值即可,
                  由于这个Key也不是用于军事目的,所以也无需设置密码。
                  如果一切顺利的话,可以在用户主目录里找到.ssh目录,里面有id_rsa和id_rsa.pub两个文件,
                  这两个就是SSH Key的秘钥对,id_rsa是私钥,不能泄露出去,id_rsa.pub是公钥,可以放心地告诉任何人。
                  
                  第2步:登陆GitHub,打开“Account settings”,“SSH Keys”⻚页面面.
                  然后,点“Add SSH Key”,填上任意Title,在Key文文本框里里粘贴id_rsa.pub文文件的内容
                  
        ==从远程库克隆/添加远程库:
                ==$ git remote add origin git@github.com:*.git
                  添加后,远程库的名字就是origin,这是Git默认的叫法,也可以改成别的,但是origin这个名字一看就知道是远程库。
                  下一步,就可以把本地库的所有内容推送到远程库上:
                ==$ git push [-u] origin [master] ?
        ==分支管理:Git的分支是与众不同的,无论创建,切换和删除分支,Git在1秒钟之内就能完成!无论你的版本库是1个文件还是1万个文件。
        ==创建与合并分支支
                  
                  
                  
                  
                  

